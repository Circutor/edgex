/*******************************************************************************
 * Copyright 2017 Dell Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 *******************************************************************************/
package notifications

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
)

type CategoryEnum string

const (
	SECURITY  CategoryEnum = "SECURITY"
	HW_HEALTH CategoryEnum = "HW_HEALTH"
	SW_HEALTH CategoryEnum = "SW_HEALTH"
)

type SeverityEnum string

const (
	CRITICAL SeverityEnum = "CRITICAL"
	NORMAL   SeverityEnum = "NORMAL"
)

type StatusEnum string

const (
	NEW       StatusEnum = "NEW"
	PROCESSED StatusEnum = "PROCESSED"
	ESCALATED StatusEnum = "ESCALATED"
)

// Common http const
const (
	ContentType        = "Content-Type"
	ContentTypeJsonVal = "application/json"
)

const (
	NotificationApiPath = "/api/v1/notification"
	UrlPattern          = "http://%s:%d%s"
)

// Struct to represent the notifications client
type NotificationsClient interface {
	SendNotification(n Notification) error
}

//Named HttpClient instead of RestClient on purpose since there is only one POST method
type notificationsHttpClient struct {
}

// Struct to represent a notification being sent to the notifications service
type Notification struct {
	Id          string       `json:"id,omitempty"` // Generated by the system, users can ignore
	Slug        string       `json:"slug"`         // A meaningful identifier provided by client
	Sender      string       `json:"sender"`
	Category    CategoryEnum `json:"category"`
	Severity    SeverityEnum `json:"severity"`
	Content     string       `json:"content"`
	Description string       `json:"description,omitempty"`
	Status      StatusEnum   `json:"status,omitempty"`
	Labels      []string     `json:"labels,omitempty"`
	Created     int          `json:"created,omitempty"`  // The creation timestamp
	Modified    int          `json:"modified,omitempty"` // The last modification timestamp
}

var notificationsClient NotificationsClient

func GetNotificationsClient() NotificationsClient {
	if notificationsClient == nil {
		notificationsClient = &notificationsHttpClient{}
	}
	return notificationsClient
}

// Send a notification to the notifications service
func (nc *notificationsHttpClient) SendNotification(n Notification) error {
	client := &http.Client{}

	// Get the JSON request body
	requestBody, err := json.Marshal(n)
	if err != nil {
		return err
	}

	// Create the request
	remoteNotificationServiceUrl := fmt.Sprintf(UrlPattern, clientConfig.serviceHost, clientConfig.servicePort, NotificationApiPath)

	return doPost(remoteNotificationServiceUrl, bytes.NewBuffer(requestBody), client)
}

// Function to do post request
func doPost(url string, binaryReqBody io.Reader, client *http.Client) error {
	req, err := http.NewRequest(http.MethodPost, url, binaryReqBody)
	req.Header.Add(ContentType, ContentTypeJsonVal)

	if err != nil {
		return err
	}

	return makeRequest(client, req)
}

// Function to actually make the HTTP request
func makeRequest(client *http.Client, req *http.Request) error {
	resp, err := client.Do(req)
	if err != nil {
		return err
	}

	defer resp.Body.Close()

	return nil
}
